$date
	Tue Jun 11 10:25:15 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module ALUTest_v $end
$var wire 1 ! Zero $end
$var wire 64 " BusW [63:0] $end
$var reg 4 # ALUCtrl [3:0] $end
$var reg 64 $ BusA [63:0] $end
$var reg 64 % BusB [63:0] $end
$var reg 8 & passed [7:0] $end
$scope module uut $end
$var wire 4 ' ALUCtrl [3:0] $end
$var wire 64 ( BusA [63:0] $end
$var wire 64 ) BusB [63:0] $end
$var wire 1 ! Zero $end
$var reg 64 * BusW [63:0] $end
$upscope $end
$scope task allPassed $end
$var reg 8 + numTests [7:0] $end
$var reg 8 , passed [7:0] $end
$upscope $end
$scope task passTest $end
$var reg 65 - actualOut [64:0] $end
$var reg 65 . expectedOut [64:0] $end
$var reg 8 / passed [7:0] $end
$var reg 257 0 testType [256:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 0
bx /
bx .
bx -
bx ,
bx +
b10101011110011010001001000110100 *
b10101011110011010000000000000000 )
b1001000110100 (
b10 '
b0 &
b10101011110011010000000000000000 %
b1001000110100 $
b10 #
b10101011110011010001001000110100 "
0!
$end
#40000
1!
b0 "
b0 *
b0 $
b0 (
b0 %
b0 )
b0 #
b0 '
b1 &
b1 /
b10000010100010001000100001000000011000001111000001100010011001000110011001101000010110000110000011110000100000101000010010000110100010000110000001100000011000000110000 0
b10101011110011010001001000110100 .
b10101011110011010001001000110100 -
#80000
0!
b100000 "
b100000 *
b100000 $
b100000 (
b100000 %
b100000 )
b10 &
b10 /
b1000001010011100100010000110001 0
b10000000000000000000000000000000000000000000000000000000000000000 .
b10000000000000000000000000000000000000000000000000000000000000000 -
#120000
1!
b0 "
b0 *
b100000000 $
b100000000 (
b11 &
b11 /
b1000001010011100100010000110010 0
b100000 .
b100000 -
#160000
0!
b1 "
b1 *
b1 $
b1 (
b0 %
b0 )
b1 #
b1 '
b100 &
b100 /
b1000001010011100100010000110011 0
b10000000000000000000000000000000000000000000000000000000000000000 .
b10000000000000000000000000000000000000000000000000000000000000000 -
#200000
b10001 "
b10001 *
b10001 $
b10001 (
b10000 %
b10000 )
b101 &
b101 /
b1001111010100100101001000110001 0
b1 .
b1 -
#240000
b110101 "
b110101 *
b110101 $
b110101 (
b100101 %
b100101 )
b110 &
b110 /
b1001111010100100101001000110010 0
b10001 .
b10001 -
#280000
b100010100100001 "
b100010100100001 *
b100000 $
b100000 (
b100010100000001 %
b100010100000001 )
b10 #
b10 '
b111 &
b111 /
b1001111010100100101001000110011 0
b110101 .
b110101 -
#320000
b1 "
b1 *
b0 $
b0 (
b1 %
b1 )
b1000 &
b1000 /
b1000001010001000100010000110001 0
b100010100100001 .
b100010100100001 -
#360000
b100000 "
b100000 *
b10000 $
b10000 (
b10000 %
b10000 )
b1001 &
b1001 /
b1000001010001000100010000110010 0
b1 .
b1 -
#400000
1!
b0 "
b0 *
b110 #
b110 '
b1010 &
b1010 /
b1000001010001000100010000110011 0
b100000 .
b100000 -
#440000
0!
b10000000 "
b10000000 *
b10010000 $
b10010000 (
b1011 &
b1011 /
b1010011010101010100001000110001 0
b10000000000000000000000000000000000000000000000000000000000000000 .
b10000000000000000000000000000000000000000000000000000000000000000 -
#480000
b1100000 "
b1100000 *
b10000000 $
b10000000 (
b100000 %
b100000 )
b1100 &
b1100 /
b1010011010101010100001000110010 0
b10000000 .
b10000000 -
#520000
b1 "
b1 *
b100 $
b100 (
b1 %
b1 )
b111 #
b111 '
b1101 &
b1101 /
b1010011010101010100001000110011 0
b1100000 .
b1100000 -
#560000
b10000 "
b10000 *
b11 $
b11 (
b10000 %
b10000 )
b1110 &
b1110 /
b10100000110000101110011011100110100001000110001 0
b1 .
b1 -
#600000
b10101 "
b10101 *
b10 $
b10 (
b10101 %
b10101 )
b1111 &
b1111 /
b10100000110000101110011011100110100001000110010 0
b10000 .
b10000 -
#640000
b10000 &
b10000 /
b10100000110000101110011011100110100001000110011 0
b10101 .
b10101 -
#650000
b10000 +
b10000 ,
