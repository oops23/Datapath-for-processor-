$date
	Tue Jun 11 13:28:48 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module SignExtenderTest_v $end
$var wire 64 ! BusImm [63:0] $end
$var reg 2 " Ctrl [1:0] $end
$var reg 26 # Imm26 [25:0] $end
$var reg 8 $ passed [7:0] $end
$scope module dut $end
$var wire 2 % Ctrl [1:0] $end
$var wire 26 & Imm26 [25:0] $end
$var wire 64 ' BusImm [63:0] $end
$upscope $end
$scope task allPassed $end
$var reg 8 ( numTests [7:0] $end
$var reg 8 ) passed [7:0] $end
$upscope $end
$scope task passTest $end
$var reg 64 * actualOut [63:0] $end
$var reg 64 + expectedOut [63:0] $end
$var reg 8 , passed [7:0] $end
$var reg 121 - testType [120:0] $end
$upscope $end
$scope task stim $end
$var reg 2 . newCtrl [1:0] $end
$var reg 26 / newImm26 [25:0] $end
$var reg 2 0 setCtrl [1:0] $end
$var reg 26 1 setImm26 [25:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 1
bx 0
b0 /
b0 .
bx -
bx ,
bx +
bx *
bx )
bx (
b0 '
b0 &
b0 %
b0 $
b0 #
b0 "
b0 !
$end
#90
b0 0
b0 1
#100
b1 /
b1 $
b1 ,
b100100100101101011101000111100101110000011001010010000000110000 -
b0 +
b0 *
#190
b1 #
b1 &
b1 1
#200
b11111111111111111111111111 /
b10 $
b10 ,
b100100100101101011101000111100101110000011001010010000000101011 -
#290
b111111111111 !
b111111111111 '
b11111111111111111111111111 #
b11111111111111111111111111 &
b11111111111111111111111111 1
#300
b1 .
b0 /
b11 $
b11 ,
b100100100101101011101000111100101110000011001010010000000101101 -
b111111111111 +
b111111111111 *
#390
b0 !
b0 '
b1 "
b1 %
b0 #
b0 &
b1 0
b0 1
#400
b1 /
b100 $
b100 ,
b100010000101101011101000111100101110000011001010010000000110000 -
b0 +
b0 *
#490
b1 #
b1 &
b1 1
#500
b11111111111111111111111111 /
b101 $
b101 ,
b100010000101101011101000111100101110000011001010010000000101011 -
#590
b1111111111111111111111111111111111111111111111111111111111111111 !
b1111111111111111111111111111111111111111111111111111111111111111 '
b11111111111111111111111111 #
b11111111111111111111111111 &
b11111111111111111111111111 1
#600
b10 .
b0 /
b110 $
b110 ,
b100010000101101011101000111100101110000011001010010000000101101 -
b1111111111111111111111111111111111111111111111111111111111111111 +
b1111111111111111111111111111111111111111111111111111111111111111 *
#690
b0 !
b0 '
b10 "
b10 %
b0 #
b0 &
b10 0
b0 1
#700
b1 /
b111 $
b111 ,
b100001000101101011101000111100101110000011001010010000000110000 -
b0 +
b0 *
#790
b1 !
b1 '
b1 #
b1 &
b1 1
#800
b11111111111111111111111111 /
b1000 $
b1000 ,
b100001000101101011101000111100101110000011001010010000000101011 -
b1 +
b1 *
#890
b1111111111111111111111111111111111111111111111111111111111111111 !
b1111111111111111111111111111111111111111111111111111111111111111 '
b11111111111111111111111111 #
b11111111111111111111111111 &
b11111111111111111111111111 1
#900
b11 .
b0 /
b1001 $
b1001 ,
b100001000101101011101000111100101110000011001010010000000101101 -
b1111111111111111111111111111111111111111111111111111111111111111 +
b1111111111111111111111111111111111111111111111111111111111111111 *
#990
b0 !
b0 '
b11 "
b11 %
b0 #
b0 &
b11 0
b0 1
#1000
b1 /
b1010 $
b1010 ,
b10000110100001000101101011101000111100101110000011001010010000000110000 -
b0 +
b0 *
#1090
b1 #
b1 &
b1 1
#1100
b11111111111111111111111111 /
b1011 $
b1011 ,
b10000110100001000101101011101000111100101110000011001010010000000101011 -
#1190
b1111111111111111111111111111111111111111111111111111111111111111 !
b1111111111111111111111111111111111111111111111111111111111111111 '
b11111111111111111111111111 #
b11111111111111111111111111 &
b11111111111111111111111111 1
#1200
b1100 $
b1100 ,
b10000110100001000101101011101000111100101110000011001010010000000101101 -
b1111111111111111111111111111111111111111111111111111111111111111 +
b1111111111111111111111111111111111111111111111111111111111111111 *
#1210
b1100 (
b1100 )
